import { z } from 'zod'

export const domainConfigSchema = z.object({
  SEQUENCER_URL: z.string().url('SEQUENCER_URL must be a a valid URL'),
  GATEWAY_URL: z.string().url('GATEWAY_URL must be a a valid URL'),
  DB_PATH: z.string().min(1, 'DB_PATH set to the location of the database on disk must be provided'),
  DB_MAX_LISTENERS: z.number().int('DB_MAX_LISTENERS must be an integer')
})

export const streamSchema = z.any().refine(stream => {
  return stream !== null &&
    typeof stream === 'object' &&
    typeof stream.pipe === 'function'
}, { message: 'Value must implement the iteration protocol' })

export const rawTagSchema = z.object({
  name: z.string(),
  value: z.string()
})

export const rawBlockSchema = z.object({
  height: z.coerce.number(),
  timestamp: z.coerce.number()
})

export const processSchema = z.object({
  id: z.string().min(1),
  owner: z.string().min(1),
  tags: z.array(rawTagSchema),
  /**
   * The block that the process is in.
   *
   * Needed in order to calculate implicit messages
   */
  block: rawBlockSchema
})

export const messageSchema = z.object({
  /**
   * The deep hash for the message. Only calculated by the CU
   * for messages with a Forwarded-For tag.
   *
   * This is value is ultimately persisted, so that it can be queried
   * to detect duplicate messages and remove them from the eval stream
   */
  deepHash: z.string().optional(),
  /**
   * The unique identifier of the cron that produced this message
   */
  cron: z.string(),
  message: z.object({
    /**
     * The tx id of the message ie. the data item id
     *
     * cron messages do not have an id, so this is optional
     */
    Id: z.string().optional(),
    /**
     * cron messages are generated by a CU, and not signed, and so not have a signature,
     * so this is optional
     */
    Signature: z.string().optional(),
    Data: z.any().optional(),
    Owner: z.string().min(1),
    Target: z.string().min(1),
    Anchor: z.string().optional(),
    From: z.string().min(1),
    'Forwarded-By': z.string().optional(),
    'Forwarded-For': z.string().optional(),
    Tags: z.array(rawTagSchema),
    Epoch: z.number(),
    Nonce: z.number(),
    Timestamp: z.coerce.number(),
    'Block-Height': z.coerce.number(),
    /**
     * cron messages are not included in the hash chain, and so do not have one,
     * so this is optional
     */
    'Hash-Chain': z.string().optional(),
    /**
     * Whether the message is a cron generated message or not
     */
    Cron: z.boolean()
  }),
  AoGlobal: z.object({
    process: z.object({
      id: z.string(),
      owner: z.string(),
      tags: z.array(rawTagSchema)
    })
  }).passthrough() // TODO: remove once AoGlobal is more defined
}).passthrough()

export const scheduleSchema = z.object({
  name: z.string(),
  cron: z.string().optional(),
  blocks: z.number().optional(),
  message: z.any()
})

export const evaluationSchema = z.object({
  /**
   * the id of the process that the message was performed upon
   */
  processId: z.string().min(1),
  messageId: z.string().min(1),
  timestamp: z.coerce.number(),
  cron: z.string().optional(),
  /**
   * The date when this record was created, effectively
   * when this record was evaluated
   *
   * not to be confused with when the transaction was placed on chain
   */
  evaluatedAt: z.preprocess(
    (
      arg
    ) => (typeof arg === 'string' || arg instanceof Date ? new Date(arg) : arg),
    z.date()
  ),
  /**
   * ao processes return { Memory, Message, Spawns, Output, Error } }
   *
   * This is the output of process, after the action was applied
   */
  output: z.object({
    Memory: z.any().optional(),
    Messages: z.array(z.any()).optional(),
    Spawns: z.array(z.any()).optional(),
    Output: z.any().optional(),
    Error: z.any().optional()
  })
})
