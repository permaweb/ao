name: üë®‚Äçüíª Test & Deploy AO CLI

on:
  pull_request:
    branches:
      - main
    paths:
      - "dev-cli/**"
  push:
    branches:
      - main
    paths:
      - "dev-cli/**"

  # Perform a release using a workflow dispatch
  workflow_dispatch:
    inputs:
      version:
        description: "semver version to bump to"
        required: true

defaults:
  run:
    shell: bash
    working-directory: dev-cli

jobs:
  # Run only run tests on PRs and pushes to main
  test:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno-version: [1.x]
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ü¶ï Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: ‚ö° Run Tests
        run: |
          deno task test
        env:
          CI: true

  test-publish-command:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dev-cli/container/src/publish

      - name: ‚ö° Run Tests
        working-directory: dev-cli/container/src/publish
        run: |
          npm test
        env:
          CI: true

  release:
    # Releases are performed via a workflow dispatch
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    concurrency:
      group: release
    steps:

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
      
      - name: ü¶ï Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 1.x

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dev-cli/tools/deploy

      - name: üëÄ Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"
          VER=`deno --version`; echo "deno ver:    $VER"

      # The version in the manifest is used to set the version
      # displayed for the CI. So we need to update version,
      # prior to building the binaries
      # 
      # So we update version here. If CI fails, then that bump is
      # never pushed. If it succeeds, the CI will push any changes to the
      # manifest, including the version bump, which is what we want
      - name: üî∫ Update Version
        id: version
        run: |
          VERSION=$(deno task bump --version=${INPUT_VERSION})
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}

      - name: üõ† Build Binaries
        id: build_binaries
        run: |
          BINARIES_OUTPUT_DIR=$(\
            deno task build-binaries \
            | tail -1
          )
          echo "binaries_output_dir=${BINARIES_OUTPUT_DIR}" >> $GITHUB_OUTPUT
        env:
          CI: true

      - name: Install Irys Client
        run: |
          npm i -g @irys/sdk@0.0.3

      - name: üíæ Publish Binaries to Arweave
        id: publish_binaries
        # Irys may fail to deploy the binaries to Arweave for a number of reasons
        # 
        # So before attempting to extract the transaction id from the output
        # We first check to make sure the success message is output
        # 
        # If the deploy was successful, We output text to stdout, the final line containing
        # the url of the transaction. We only need the transaction id
        # 
        # So we tail the output and strip the last part of the printed url
        # which should be the transaction id
        #
        # We also add additional tags in order to mint $U
        run: |
          irys balance ${CI_WALLET_ADDRESS} \
            -h ${IRYS_NODE} \
            -c arweave

          irys price $(du -b "${BINARIES_OUTPUT_DIR}" | cut -f1) \
            -h ${IRYS_NODE} \
            -c arweave

          IRYS_RESULT=$(deno task deploy-binaries)

          echo "${IRYS_RESULT}"
          if [[ -z $(echo "${IRYS_RESULT}" | awk '/^Uploaded to https:\/\/arweave.net\//') ]]; then
            echo "Binaries were not successfully deployed to Irys! See above logs."
            exit 1
          fi

          TRANSACTION_ID=$(\
            echo "${IRYS_RESULT}" \
            | tail -1 \
            | awk -F/ '{print $NF}'
          )
          echo "tx_id=${TRANSACTION_ID}" >> $GITHUB_OUTPUT
        env:
          CI_WALLET_ADDRESS: ${{ secrets.CI_WALLET_ADDRESS }}
          BINARIES_OUTPUT_DIR: ${{ steps.build_binaries.outputs.binaries_output_dir }}
          IRYS_NODE: https://node2.irys.xyz
          CI_WALLET: ${{ secrets.CI_WALLET }}

      - name: üõ† Publish Install Script to Arweave
        id: publish_install
        # We output text to stdout, the final line containing
        # the url of the transaction. We only need the transaction id
        # 
        # So we tail the output and strip the last part of the printed url
        # which should be the transaction id
        run: |
          INSTALL_SCRIPT=$(deno task build-install-script --binaries=${BINARIES_TRANSACTION_ID})

          IRYS_RESULT=$(deno task deploy-install-script)

          echo "${IRYS_RESULT}"
          if [[ -z $(echo "${IRYS_RESULT}" | awk '/^Uploaded to https:\/\/arweave.net\//') ]]; then
            echo "Binaries were not successfully deployed to Irys! See above logs."
            exit 1
          fi

          TRANSACTION_ID=$(\
            echo "${IRYS_RESULT}" \
            | tail -1 \
            | awk -F/ '{print $NF}'
          )
          echo "tx_id=${TRANSACTION_ID}" >> $GITHUB_OUTPUT
        env:
          BINARIES_TRANSACTION_ID: ${{ steps.publish_binaries.outputs.tx_id }}
          IRYS_NODE: https://node2.irys.xyz
          CI_WALLET: ${{ secrets.CI_WALLET }}

      - name: ü§ì Set Git User
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      # Until we use something like ArNS, we need a way to keep track of the transactions
      # that contain the ao CLI
      #
      # So we will persist the transaction ids into this file, committed as part of this CI
      - name: üó∫Ô∏è Update txMappings
        run: |
          deno task tx-mappings \
            --version=${VERSION} \
            --binaries=${BINARIES_TRANSACTION_ID} \
            --install=${INSTALL_TRANSACTION_ID} \
            --latest
          deno fmt deno.json
        env:
          VERSION: ${{ steps.version.outputs.version }}
          BINARIES_TRANSACTION_ID: ${{ steps.publish_binaries.outputs.tx_id }}
          INSTALL_TRANSACTION_ID: ${{ steps.publish_install.outputs.tx_id }}

      - name: ‚¨ÜÔ∏è Push
        # We purposefully don't use "--follow-tags" here
        #
        # Git will push tags in parallel when using '--follow-tags'.
        # So if the tip of trunk has changed, this will cause the tag to be pushed, but not the commit.
        #
        # To get around this, we first attempt to push the commit. If it succeeds, the tag is then pushed.
        # If pushing the commit fails, then the step fails and no tag is pushed up, which is what we want.
        run: |
          git add deno.json
          git commit -m "chore(dev-cli): bump version and update txMappings"
          git push
          git push --tags
